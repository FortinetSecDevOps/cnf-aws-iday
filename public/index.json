[
{
	"uri": "/4_modulefour/41_distributedingress.html",
	"title": "Distributed Ingress",
	"tags": [],
	"description": "",
	"content": " Distributed Ingress For this traffic flow we will focus on the Application VPC. Distributed ingress is commonly used when there is a need to inspect traffic for a VPC that is directly accessible with an attached IGW and resources with a public Elastic IP (EIP) or behind a public load balancer (ie ALB, NLB, etc). The benefit of this design is that traffic does not need to traverse additional AWS networking components for inspection so each VPC is isolated from others. The caveat to consider is that each VPC would need a directly attached IGW and resources such as load balancers, NAT GWs, etc that have additional cost.\nStep 1: An inbound connection starts with an external user initiating a connection to a public resource such as a public NLB. The public NLB has a DNS record that resolves to a public IP for one of the NLB\u0026rsquo;s Elastic Network Interface (ENI) in either public subnet. The first packet (ie TCP SYN) will then be seen at the IGW attached to the VPC where the public NLB is deployed. Since there is a Ingress route table assigned to the IGW, traffic destined to either public subnet will be sent to the GWLBe endpoint in the same AZ.\nThe IGW will perform destination NAT to change the public IP of the NLB to the private IP of the NLB ENI.\n Step 2: The traffic is received at the GWLBe endpoint which then routes the traffic to the associated GWLB ENI in the same AZ in the managed Fortinet AWS account/VPC. This is done behind the scene using AWS Private Link.\nStep 3: The traffic is received at the GWLB ENI and is then encapsulated in a GENEVE tunnel and routed to one of the instances in the FortiGate CNF auto scale group for traffic inspection. Post inspection, if the traffic is allowed, the instance will hairpin the traffic back to the same GWLB ENI over GENEVE. Then the GWLB ENI will hairpin the traffic back to the same GWLBe endpoint.\nStep 4: The GWLBe endpoint will then route the inspected traffic to the intrinsic router. The intrinsic router will route traffic directly to the NLB\u0026rsquo;s ENI as specified in the VPC route table assigned to the subnet.\nStep 5: The NLB will send traffic to a healthy target, in either AZ since cross zone load balancing is enabled.\nThe NLB will perform destination NAT to change the private IP to that of the healthy target.\n Step 6: The web server will receive the traffic and respond. The return traffic will flow these steps in reverse.\n 1. To test out this flow navigate to the AWS CloudFormation console and toggle the view nested button to off \u0026gt; then select the stack name \u0026gt; and on the details pane select the outputs tab. You should see the output for URLforApp1. Click on the value for that output to check that App1 is no longer reachable now. Click on the value for the output EncryptedURLforApp1 and you will see the self-signed certificate warning. Once you accept the warning, you will see the test web page.  You are now only allowing HTTPS inbound to your environment that is sourced from a public IP within the United States!\n "
},
{
	"uri": "/1_moduleone.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Introduction Learning Objectives At the end of this workshop, you will complete the following objectives:\n Understand AWS Networking Concepts (10 minutes) Understand AWS Common Architecture Patterns (10 minutes) Understand FortiGate CNF terminology (5 minutes) Subscribe to FortiGate CNF (5 minutes) Onboard an AWS account (5 minutes) Deploy a FortiGate CNF Instance \u0026amp; GWLBe endpoints (20 minutes) Create a policy set and apply it to a FortiGate CNF Instance (10 minutes) Test traffic flows (distributed in + egress and centralized e-w + egress) (20 minutes)  Workshop Components These are the AWS and Fortinet components that will be used during this workshop:\n AWS Marketplace FortiCloud FortiGate CNF Portal AWS CloudFormation Templates (Infrastructure as Code, IaC) AWS SDN (AWS intrinsic router and route tables in a VPC) AWS Gateway Load Balancer (GWLB) AWS Transit Gateway (TGW) AWS EC2 Instances (Amazon Linux OS)  AWS Reference Architecture Diagram This is the architecture and environment that will be used in the workshop.\n With AWS networking there are several different ways to organize your AWS architecture to take advantage of FortiGate CNF traffic inspection. The important point to know is that as long as the traffic flow has a symmetrical routing path (for forward and reverse flows), the architecture will work.\n This diagram will highlight two main designs that are common architecture patterns for securing traffic flows.\n Distributed Ingress + Egress\n Centralized Egress + East-West\n  "
},
{
	"uri": "/",
	"title": "Secure AWS workloads with FortiGate CNF SaaS",
	"tags": [],
	"description": "",
	"content": " Secure AWS workloads with FortiGate CNF SaaS \nWelcome! AWS Software-Defined Networking (SDN) is elastic, complex, and quite different than traditional on-premise networking. In this workshop you will learn how to use FortiGate Cloud Native Firewall as a Service (FortiGate CNF) to protect your AWS workloads deployed in common architecture patterns.\nThis workshop is intended to help accomplish the following:\n Learn common AWS networking concepts such as routing traffic in and out of VPCs for various traffic flows Interact with FortiGate CNF Portal to deploy CNF instances, build security policy sets, and deploy them Test traffic flows in an example environment and use FortiGate CNF to control traffic flows  "
},
{
	"uri": "/3_modulethree/31_task1.html",
	"title": "Task 1: Subscribe to FortiGate CNF in AWS Marketplace",
	"tags": [],
	"description": "",
	"content": " Task 1: Subscribe to FortiGate CNF in AWS Marketplace  1. Log into your AWS account and navigate to the AWS Marketplace listing for FortiGate CNF. In the upper right corner, click View purchase options. On the next page, click Subscribe.   2. In the available offers list, select the Public offer.   3. The page should update and show the GA pricing. Click Subscribe.   4. A green banner will be at the top of the screen. Click Set up your account and this will redirect you to associating this subscription to your FortiCloud account.   5. If you do not already have a FortiCloud account, the Register button will navigate you to where you can create your own account quickly. Otherwise move on to the next step and login to your existing FortiCloud Account.   6. You should see this page showing your information and that the subscription has been successfully applied to your FortiCloud account.   7. Click on your account tile and you will now be on the dashboard of FortiGate CNF.   8. This concludes this section.  "
},
{
	"uri": "/2_moduletwo/21_logistics.html",
	"title": "Workshop Logistics",
	"tags": [],
	"description": "",
	"content": " Workshop Logistics Accessing an AWS environment For the AWS Immersion Days, we will provide you the following via email:\n AWS sign in link IAM User w/ console access Password for the IAM User  If you are wanting to run through this in your own environment for training purposes, use the master CFT to deploy the base environment.\n Accessing the FortiGate CNF Console FortiGate CNF and other SaaS solutions are tied to your FortiCloud. If you do not already have one, please navigate here and complete the registration process.\nIf you already have an account and don\u0026rsquo;t want to use that for this lab, it is recommended to create your own FortiCloud account.\nOnce logged in, you will see your FortiCloud dashboard.\nYou will log into the FortiGate CNF console later during the hands on section.\nPlease log out before proceeding to the next part of the workshop.\n Navigating the AWS Console When you first login you will see the Console Home page.\nUse the Search Box at the top to search for services such as EC2, VPC, CloudFormation, etc.\nWhen the results pop up, right click the name of the service and open the desired console in a new tab. This makes navigation easier.\n"
},
{
	"uri": "/2_moduletwo/22_awsnetworkingconcepts.html",
	"title": "AWS Networking Concepts",
	"tags": [],
	"description": "",
	"content": " AWS Networking Concepts Before diving into the reference architecture for this workshop, let\u0026rsquo;s review core AWS networking concepts.\nAWS Virtual Private Cloud (VPC) is a logically isolated section of the AWS Cloud where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways.\nAvailability zones (AZ) are multiple, isolated locations within each Region that have independent power, cooling, physical security, etc. A VPC spans all of the AZs in the Region.\nRegion, is a collection of multiple regional AZs in a geographic location. The collection of AZs in the same region are all interconnected via redundant, ultra-low-latency networks.\nAll subnets within a VPC are able to reach each other with the default or intrinsic router within the VPC. All resources in a subnet use the intrinsic router (1st host IP in each subnet) as the default gateway. Each subnet must be associated with a VPC route table, which specifies the allowed routes for outbound traffic leaving the subnet.\nAn Internet Gateway (IGW) is a horizontally scaled, redundant, and highly available VPC component that allows communication between instances in your VPC and the internet. It therefore imposes no availability risks or bandwidth constraints on your network traffic.\nAWS NAT Gateway (NAT GW) is a Network Address Translation (NAT) service. You can use a NAT gateway so that instances in a private subnet can connect to services outside your VPC but external services cannot initiate a connection with those instances.\nAWS Transit Gateway (TGW) is a highly scalable cloud router that connects your VPCs in the same region to each other, to on-premise networks, and even to the internet through one hub. With the use of multiple route tables for a single TGW, you can design hub and spoke routing for traffic inspection and enforcement of security policy across multiple VPCs.\nAWS (Gateway Load Balancer (GWLB) is a transparent network gateway that distributes traffic (in a 3\u0026frasl;5 tuple flow aware manner) to a fleet of virtual appliances for inspection. This is a regional load balancer that uses GWLB endpoints (GWLBe) to securely intercept data plane traffic within consumer VPCs in the same region.\nIn this workshop we will use all these components to test FortiGate CNF in an enterprise design.\n"
},
{
	"uri": "/4_modulefour/42_distributedegress.html",
	"title": "Distributed Egress",
	"tags": [],
	"description": "",
	"content": " Distributed Egress For this traffic flow we will focus on the Application VPC. Distributed egress is commonly used when there is a need to inspect traffic for a VPC that has an attached IGW and resources with a public Elastic IP (EIP) or that are behind a NAT GW. The benefit of this design is that traffic does not need to traverse additional AWS networking components for inspection so each VPC is isolated from others. The caveat to consider is that each VPC would need a directly attached IGW and resources such as NAT GWs that have additional cost.\nStep 1: An outbound connection starts with a private EC2 instance initiating a connection to a public resource. The first packet (ie TCP SYN) will be routed to the intrinsic router which will route traffic to the NAT GW in the same AZ, as configured in the assigned VPC route table. The EC2 instance has a default route, received via DHCP, that points to the first host IP in the subnet which is the intrinsic router.\nStep 2: The traffic is received at the NAT GW ENI which then routes the traffic to the associated GWLBe endpoint in the same AZ, as configured in the assigned VPC route table.\nThe NAT GW will source NAT the traffic to the private IP assigned to its ENI.\n Step 3: The traffic is received at the GWLBe endpoint which then routes the traffic to the associated GWLB ENI in the same AZ in the managed Fortinet AWS account/VPC. This is done behind the scene using AWS Private Link.\nStep 4: The traffic is received at the GWLB ENI and is then encapsulated in a GENEVE tunnel and routed to one of the instances in the FortiGate CNF auto scale group for traffic inspection. Post inspection, if the traffic is allowed, the instance will hairpin the traffic back to the same GWLB ENI over GENEVE. Then the GWLB ENI will hairpin the traffic back to the same GWLBe endpoint.\nStep 5: The GWLBe endpoint will then route the inspected traffic to the intrinsic router. The intrinsic router will route traffic directly to the IGW as specified in the VPC route table assigned to the subnet.\nThe IGW will source NAT the traffic to the public EIP assigned to the NAT GW ENI.\n Step 6: The destination will receive the traffic and respond. The return traffic will be intercepted at the IGW and routed to the GWLBe endpoint. Then the return traffic follow these steps in reverse.\n 1. To test out this flow navigate to the AWS EC2 console and go to Instances \u0026gt; Instances. Then select either AppInstance and click Connect \u0026gt; EC2 serial console. Copy the instance ID as this will be the username and click connect.   2. Login to the instance with the instance ID as the username and Fortinet123! as the password. Then run the commands below to test traffic:  ping 8.8.8.8\ncurl http://ipinfo.io\ncurl https://ipinfo.io\nYou are now only allowing HTTPS outbound to one FQDN and ICMP to any public IP within the United States!\n "
},
{
	"uri": "/3_modulethree/32_task2.html",
	"title": "Task 2: Onboard an AWS account to FortiGate CNF",
	"tags": [],
	"description": "",
	"content": " Task 2: Onboard an AWS account to FortiGate CNF  1. In the FortiGate CNF Console, navigate to AWS Accounts, then click New to start the add account wizard.   2. In a new browser tab, log into your AWS account and click on your IAM user name in the upper right corner. This will allow you to see and copy your AWS account ID.   3. In the FortiGate CNF Console, provide your AWS account ID and select Launch CloudFormation Template. This will redirect you to the CloudFormation Console in your AWS account in the us-west-2 region.  Note: Your browser may block the popup window to launch the CloudFormation console. Please check your browser for blocked popup notifications.\n  4. This CloudFormation Template creates the following items:  A. S3 bucket for sending logs\nB. IAM Cross Account Role which allows us to manage GWLBe endpoints, describe VPCs, push logs to S3, and describe instances and EKS clusters for the SDN connector feature (dynamic address objects based on metadata).\nC. Custom resources which kicks off automation on our managed accounts to complete backend tasks for onboarding the AWS account.\n 5. Please follow through the create stack wizard without changing the region or any of the parameter values. Simply follow the steps outlined in the FortiGate CNF Console and click through the CloudFormation wizard.  Note: This CloudFormation template must be ran in the us-west-2 (Oregon) region for successful onboarding and ongoing operations of this AWS account with FortiGate CNF.\n  6. Once the CloudFormation template has been created successfully, you should see your account showing Success in the AWS account page of FortiGate CNF.   7. This concludes this section.  "
},
{
	"uri": "/2_moduletwo.html",
	"title": "Workshop Prerequisites",
	"tags": [],
	"description": "",
	"content": " Workshop Prerequisites In this section we will step through the what is needed before you can get the most out of the rest of the workshop!\n"
},
{
	"uri": "/2_moduletwo/23_awscommonarchitecturepatterns.html",
	"title": "AWS Common Architecture Patterns",
	"tags": [],
	"description": "",
	"content": " AWS Common Architecture Patterns While there are many ways to organize your infrastructure there are two main ways to design your networking when using GWLB, centralized and distributed. From the perspective of networking, routing, and GWLBe placement. We will discuss this further below.\nFortiGate CNF is a SaaS offering that on the backend uses FortiGates, AWS GWLB, and GWLB endpoints to intercept customer traffic and inspect this transparently. As part of the deployment process for FortiGate CNF instances, the customer environment will need to implement VPC and ingress routing at the IGW to intercept the traffic to be inspected.\nThe FortiGate CNF security stack which includes the AWS GWLB and other components will deployed in Fortinet managed AWS accounts. The details of the diagram are simply an example of the main components used in FortiGate CNF. This is more to understand what happens when customer traffic is received at our GWLB.\nDecentralized designs do not require any routing between the protected VPC and another VPC through TGW. These designs allow simple service insertion with minimal routing changes to the VPC route table. The yellow numbers show the initial packet flow for a session and how it is routed (using ingress and VPC routes) to the GWLBe endpoint which then sends traffic to the FortiGate CNF stack. The blue numbers show the returned traffic after inspection by the FortiGate CNF stack.\nNote: Any subnet where the GWLBe for the FortiGate CNF instance is to be deployed will need to have a specific tag name and value to be seen in the FortiGate CNF portal. Currently this is the tag name \u0026lsquo;fortigatecnf_subnet_type\u0026rsquo; and tag value \u0026lsquo;endpoint\u0026rsquo;.\nCentralized designs require the use of TGW to provide a simple hub and spoke architecture to inspect traffic. These can simplify east-west and egress traffic inspection needs while removing the need for IGWs and NAT Gateways to be deployed in each protected VPC for egress inspection. You can still mix a decentralized architecture to inspect ingress and even egress traffic while leveraging the centralized design for all east-west inspection.\nThe yellow numbers show the initial packet flow for a session and how it is routed (using ingress, VPC routes, and TGW routes) to the GWLBe which then sends traffic to the FortiGate CNF stack. The blue numbers (east-west) and purple numbers (egress) show the returned traffic after inspection by the FortiGate CNF stack.\nFor more examples of distributed and centralized models, please reference the examples on the FortiGate CNF Admin Guide.\n"
},
{
	"uri": "/4_modulefour/43_centralizedegress.html",
	"title": "Centralized Egress",
	"tags": [],
	"description": "",
	"content": " Centralized Egress For this traffic flow we will focus on the Shared Services, Workload, and Inspection VPCs. Centralized egress is commonly used when there is a strong desire to control egress traffic through a common set of NAT GWs in an egress or what we call an Inspection VPC. The benefit of this design is that you only need NAT GWs in the Inspection VPC (one per AZ) vs every VPC (one per AZ), which have an hourly cost. The caveat of this design is traffic will traverse additional AWS networking components for inspection (ie TGW, etc) that will have additional cost.\nStep 1: An outbound connection starts with a private EC2 instance initiating a connection to a public resource. The first packet (ie TCP SYN) will be routed to the intrinsic router which will route traffic to the TGW attachment in the same AZ, as configured in the assigned VPC route table. The EC2 instance has a default route, received via DHCP, that points to the first host IP in the subnet which is the intrinsic router.\nStep 2: The traffic is received at the TGW ENI which then routes the traffic to the Inspection VPC TGW attachment, as configured in the associated Spoke VPC TGW route table.\nStep 3: The traffic is received at the TGW ENI in the Inspection VPC which then routes the traffic to the GWLBe endpoint in the same AZ, as configured in the associated VPC route table.\nStep 4: The traffic is received at the GWLBe endpoint which then routes the traffic to the associated GWLB ENI in the same AZ in the managed Fortinet AWS account/VPC. This is done behind the scene using AWS Private Link.\nStep 5: The traffic is received at the GWLB ENI and is then encapsulated in a GENEVE tunnel and routed to one of the instances in the FortiGate CNF auto scale group for traffic inspection. Post inspection, if the traffic is allowed, the instance will hairpin the traffic back to the same GWLB ENI over GENEVE. Then the GWLB ENI will hairpin the traffic back to the same GWLBe endpoint.\nStep 6: The GWLBe endpoint will then route the inspected traffic to the intrinsic router. The intrinsic router will route traffic directly to the NAT GW in the same AZ as specified in the VPC route table assigned to the subnet.\nStep 7: The traffic is received at the NAT GW ENI which then routes the traffic to the intrinsic router. The intrinsic router will route traffic directly to the IGW as specified in the VPC route table assigned to the subnet.\nNote: The NAT GW will source NAT the traffic to the private IP assigned to its ENI.\nStep 8: The destination will receive the traffic and respond. The return traffic will follow these steps in reverse.\nThe IGW will source NAT the traffic to the public EIP assigned to the NAT GW ENI.\n  1. To test out this flow navigate to the AWS EC2 console and go to Instances \u0026gt; Instances. Then select either WrkInstance and click Connect \u0026gt; EC2 serial console. Copy the instance ID as this will be the username and click connect.   2. Login to the instance with the instance ID as the username and Fortinet123! as the password. Then run the commands below to test traffic:  ping 8.8.8.8\ncurl http://ipinfo.io\ncurl https://ipinfo.io\nYou are now only allowing HTTPS outbound to one FQDN and ICMP to any public IP within the United States!\n   Question 1: What happens if you try the same test from SSInstance1?   You should be able to access the IPinfo.io site over HTTPS and ping any public IP within the United States.\n    Question 2: What address objects are allowing this communication to work even though the sdn-group = group3 for this instance?   AppPublicSubnet1 + AppPublicSubnet2. Remember that Dynamic, FQDN, and standard address objects still resolve to IPs. Since the Application-VPC and SharedServices-VPC share the same CIDR the data plane traffic will match on those Address objects.\nA solution to this would be to use multiple CNF Instances in a region or expand on your tagging strategy to make the objects be more specific while avoiding using broad subnet CIDR values in the same L4 rule.\n  "
},
{
	"uri": "/3_modulethree/33_task3.html",
	"title": "Task 3: Deploying CNF Instances and GWLBe endpoints",
	"tags": [],
	"description": "",
	"content": " Task 3: Deploying CNF Instances and GWLBe endpoints  1. In the FortiGate CNF console, navigate to CNF instances and click New.   2. Provide a name for the CNF instance, select us-east-2 for the region for deployment, select Internal S3 for the log type, and select the S3 bucket created by CloudFormation for the logging destination. Then click Save. This will drop you back to the list of CNF instances while this is deployed in the background.  Note: FortiGate CNF is available in the following regions today. Based on customer demand, more regions will be supported in the future.\n  us-east-1 (N. Virginia) us-east-2 (Ohio) us-west-1 (N. California) us-west-1 (Oregon) eu-central-1 (Frankfurt) eu-west-1 (Ireland) ap-northeast-1 (Tokyo)   3. The CNF Instance should show up as active after roughly 10 minutes (Now is a great time for a break :) ). Then you can select and edit it to deploy endpoints and assign a policy set.   4. On the Configure Endpoints section of the wizard, click the New button. Then you can select the account, VPC, then toggle the Select from all subnets to off (this filters the subnets to only show ones that are properly tagged), and the subnet to deploy the VPC endpoint to. Repeat this step for all subnets in the table below, then click the Next button. Once all have been created, click *Next.  Note: In order for FortiGate CNF to successfully create a GWLBe in a subnet, the subnet must be properly tagged. The subnet needs a Tag Name = fortigatecnf_subnet_type and Tag Value = endpoint. Otherwise you will see an error that the subnet ID is invalid. The subnets below have already been tagged properly.\n    VPC Subnet     Application-VPC Application-GwlbeSubnet1   Application-VPC Application-GwlbeSubnet2   Inspection-VPC Inspection-GwlbeSubnet1   Inspection-VPC Inspection-GwlbeSubnet2     5. On the Configure Policy Set section of the wizard, use the default \u0026lsquo;allow_all\u0026rsquo; policy to allow all traffic from a Layer 4 perspective and click Finalize to push that default policy. You should then see the list of CNF instances again.   6. To validate all GWLBe endpoints have been deployed and are active (takes ~5 mins), select and edit the CNF instance and click Next to view the GWLBe endpoints on the Configure Endpoints section of the wizard. Then click Exit to leave the CNF configuration wizard.   7. Log into your AWS Account and navigate to the VPC Console \u0026gt; Endpoints. Each of the GWLBe endpoints you deployed in the FortiGate CNF Console should be visible in your account. Notice the tag name and value pairs assigned to the endpoints.  Note: At this point in a normal environment, you would need to create ingress and VPC routes to direct traffic to the GWLBe endpoints that were created by FortiGate CNF for inspection. However, for this workshop there is a Lambda function that is creating these routes for you to match the AWS Reference Architecture Diagram.\n  9. To validate that the relevant VPC routes have been automatically created to route traffic to the GWLBe endpoints, in the AWS VPC console, navigate to Virtual Private Cloud \u0026gt; Route Tables, select each of the route tables listed below and confirm these routes exist in the route tab of the route table details pane.     VPC Route Table # Routes to GLWBe     Application-IgwRouteTable 2x (one per public subnet), one per GWLBe (each AZ)   Application-Public1RouteTable 1x (default route), GWLBe AZ1   Application-Public2RouteTable 1x (default route), GWLBe AZ2   Inspection-Public1RouteTable 1x (10.0.0.0/8 route), GWLBe AZ1   Inspection-Public2RouteTable 1x (10.0.0.0/8 route), GWLBe AZ2   Inspection-TgwAttach1RouteTable 1x (default route), GWLBe AZ1   Inspection-TgwAttach2RouteTable 1x (default route), GWLBe AZ2     10. To confirm that app1 in the Application VPC is reachable, in the AWS CloudFormation console, toggle the view nested button to off \u0026gt; then select the stack name \u0026gt; and on the details pane select the outputs tab. You should see the output for URLforApp1. Click on the value for that output to check that App1 is reachable now. You should see a simple webpage with some metadata about the backend web server instance that is reachable via the public Network Load Balancer (NLB).   11. This concludes this section.  "
},
{
	"uri": "/3_modulethree.html",
	"title": "Workshop Hands On",
	"tags": [],
	"description": "",
	"content": " Workshop Hands On "
},
{
	"uri": "/4_modulefour/44_centralizedeastwest.html",
	"title": "Centralized East West",
	"tags": [],
	"description": "",
	"content": " Centralized East West For this traffic flow we will focus on the Shared Services, Workload, and Inspection VPCs. Centralized East West is commonly used when there is need for multiple VPCs in the same region to access common private resources such as a shared services VPC, premise items, or workloads/services in other VPCs. The benefit of this design is that this a flexible but simple way to interconnect many resources in the same region. The caveat of this design is traffic will traverse additional AWS networking components for inspection (ie TGW, etc) that will have additional cost.\nStep 1: An outbound connection starts with a private EC2 instance initiating a connection to a public resource. The first packet (ie TCP SYN) will be routed to the intrinsic router which will route traffic to the TGW attachment in the same AZ, as configured in the assigned VPC route table. The EC2 instance has a default route, received via DHCP, that points to the first host IP in the subnet which is the intrinsic router.\nStep 2: The traffic is received at the TGW ENI which then routes the traffic to the Inspection VPC TGW attachment, as configured in the associated Spoke VPC TGW route table.\nStep 3: The traffic is received at the TGW ENI in the Inspection VPC which then routes the traffic to the GWLBe endpoint in the same AZ, as configured in the associated VPC route table.\nStep 4: The traffic is received at the GWLBe endpoint which then routes the traffic to the associated GWLB ENI in the same AZ in the managed Fortinet AWS account/VPC. This is done behind the scene using AWS Private Link.\nStep 5: The traffic is received at the GWLB ENI and is then encapsulated in a GENEVE tunnel and routed to one of the instances in the FortiGate CNF auto scale group for traffic inspection. Post inspection, if the traffic is allowed, the instance will hairpin the traffic back to the same GWLB ENI over GENEVE. Then the GWLB ENI will hairpin the traffic back to the same GWLBe endpoint.\nStep 6: The GWLBe endpoint will then route the inspected traffic to the intrinsic router. The intrinsic router will route traffic to the TGW attachment in the same AZ as specified in the VPC route table assigned to the subnet.\nStep 7: The traffic is received at the TGW ENI which then routes the traffic to the Shared Services VPC TGW attachment, as configured in the associated Inspection VPC TGW route table.\nStep 8: The traffic is received at the TGW ENI in the Shared Services VPC which then routes the traffic to the destination, as configured in the associated VPC route table.\n 1. To test out this flow navigate to the AWS EC2 console and go to Instances \u0026gt; Instances. Then select WrkInstance2 and click Connect \u0026gt; EC2 serial console. Copy the instance ID as this will be the username and click connect.   2. Login to the instance with the instance ID as the username and Fortinet123! as the password. Then run the commands below to test traffic:  ping 10.1.2.10\nssh ec2-user@10.1.2.10\ncurl -k https://10.1.2.10\nYou are now only allowing HTTPS and RADIUS access between two resourced based on metadata (ie Tags)!\n   Question 1: What happens if you try the same test from WrkInstance1?   You are able to ping but SS annd HTTPS time out.\n    Question 2: What tags are allowing this communication to match the dynamic address objects?   For the ProdAPIBackend object, Tag.env=prod AND Tag.app-role=api AND Tag.app-tier=backend. For the ProdAuthBackend object, Tag.env=prod AND Tag.app-role=auth AND Tag.app-tier=backend.\n  "
},
{
	"uri": "/2_moduletwo/24_fortigatecnfterminology.html",
	"title": "FortiGate CNF Terminology",
	"tags": [],
	"description": "",
	"content": " FortiGate CNF Terminology    Term Description     CNF Console The console in which you deploy CNF instances and manage policy sets   CNF Instance A deployment of CNF resources in an auto scale group in the region of your choice   Policy Set The group of FW rules, objects, and security profile groups that are assigned to one or many CNF Instance(s)   Security Profile Group A group of Layer 7 inspection profiles such as DNS filter, and known bad IP blocking    "
},
{
	"uri": "/3_modulethree/34_task4.html",
	"title": "Task 4: Create a policy set and apply it to a FortiGate CNF Instance",
	"tags": [],
	"description": "",
	"content": " Task 4: Create a policy set and apply it to a FortiGate CNF Instance  1. At this point, we are using the default allow_all policy set which allows all communication to be allowed without any restriction from a Layer 4 and Layer 7 perspective.   2. To customize the actual L4 rules and L7 security profile groups applied, in the FortiGate CNF Console navigate to Policy \u0026amp; Objects \u0026gt; Policy Sets to create your own policy set. Simply click Create New, select Policy Set, and give your policy set a name.   3. Before adding in L4 rules within the policy set, create a few simple address objects. *Navigate to Policy \u0026amp; Objects \u0026gt; Addresses, click New, and Address. Then create each of the address objects below.     Name Type IP/Netmask Value     ClassA Subnet 10.0.0.0/8   ClassB Subnet 172.16.0.0/12   ClassC Subnet 192.168.0.0/16   GooglePublicDNS1 Subnet 8.8.8.8\u0026frasl;32   GooglePublicDNS2 Subnet 8.8.4.4\u0026frasl;32   AppPublicSubnet1 Subnet 10.1.1.0/24   AppPublicSubnet2 Subnet 10.1.2.0/24     4. Next, create an Address Group to include all the RFC 1918 class objects. On the same page, click New, and Address Group. Then create each the address object below.     Name Members Value     RFC-1918 ClassA, ClassB, ClassC     5. In FortiGate CNF you can create different types of address objects to be more flexible and granular in your rules within your policy set. Create an FQDN based address object by clicking New, and Address. Select FQDN for Type, then create the address object below.  Note: This can be used for internal Application, Network, and even legacy Elastic Load Balancers (ie ALB, NLB, ELB) to dynamically resolve their private IPs.\n    Name Type FQDN Value     ipinfo.io FQDN ipinfo.io     6. Geography based address objects are available in FortiGate CNF. This allows controlling traffic based on public IPs assigned to countries around the globe. These objects can be used as a source or destination object within policies used in a policy set. Create a geo based address object by clicking New, and Address. Select Geography for Type, then create the address objects below.  Note: The IP for the country or region is automatically determined from the Geography IP database which is provided by FortiGuard Servers on a recurring basis. For more granular control to applications (especially external), it is recommended to use URL or DNS filtering and even Application Control for L7 inspection.\n    Name Type Country/Region Value     UnitedStates Geography United States   Russia Geography Russian Federation     7. Dynamic metadata based address objects are available in FortiGate CNF. This allows controlling of traffic based on things such as VPC ID, Auto Scale Group, EKS Cluster or Pod, and even Tag Name + Value pairs for a given AWS account and region. Create a dynamic based address object by clicking New, and Address. Select Dynamic for Type, then create the address objects below.  Note: This is using AWS API calls behind the scenes such as ec2:DescribeInstances, eks:ListClusters, eks:DescribeCluster, etc. For instances, these must be running to have their IP address(es) (public and or private IPs) returned.\n Note: For each object, you will use the same values for these settings:\n   Type AWS Account ID AWS Region     Dynamic Workshop-AWS-Account-ID us-east-2    Here is the list of dynamic objects to create:\n   Name SDN Address Type Filter Value     ProdAPIBackend Private Tag.env=prod AND Tag.app-role=api AND Tag.app-tier=backend   ProdAuthBackend Private Tag.env=prod AND Tag.app-role=auth AND Tag.app-tier=backend   SDNGroup1 Private Tag.sdn-group=group1   SDNGroup2 Private Tag.sdn-group=group2   SDNGroup3 Private Tag.sdn-group=group3     8. Now you will create a policy set to enforce L4 rules using the address objects you just created in the previous steps. Navigate to Policy \u0026amp; Objects \u0026gt; Policy Sets and click New, Policy Set. Give it a name and click Ok. You will be returned to the list of policy sets. Select your policy set and click Edit.   9. Now you can create the policies listed below to control all directions of traffic within the example environment. Click New and create the policies listed below:     Name Source Destination Service Action Log Allowed Traffic     BlockList-Inbound Russia all ALL DENY All Sessions   BlockList-Outbound all Russia ALL DENY All Sessions   HTTPS-Inbound UnitedStates RFC-1918 HTTPS ACCEPT All Sessions   ICMP-EastWest RFC-1918 RFC-1918 ALL_ICMP ACCEPT All Sessions   AuthSharedServices-EastWest ProdAPIBackend ProdAuthBackend HTTPS + RADIUS ACCEPT All Sessions     ICMP-Egress RFC-1918 UnitedStates ALL_ICMP ACCEPT All Sessions   IPinfo-Egress SDNGroup1 + SDNGroup2 + AppPublicSubnet1 + AppPublicSubnet2 ipinfo.io HTTPS ACCEPT All Sessions     10. In order to use this policy set, it must be applied to the deployed FortiGate CNF Instance. Navigate to CNF instances and select and edit the CNF Instance then click the Configure Policy Set bread crumb. In the Apply Policy Set, select your policy set then click Save then Finalize.   11. This concludes this section.  "
},
{
	"uri": "/4_modulefour.html",
	"title": "Workshop Test Traffic",
	"tags": [],
	"description": "",
	"content": "In this section you will validate that the policy set is controlling traffic as intended. Below is the overall architecture of the environment.\nWe will look into these specific traffic flows:\n Distributed Ingress Distributed Egress Centralized Egress Centralized East West  "
},
{
	"uri": "/5_modulefive.html",
	"title": "Providing Feedback",
	"tags": [],
	"description": "",
	"content": " Thank You! Providing Feedback We truly appreciate your time and efforts to review FortiGate CNF and value your feedback greatly. Please take the time to capture your thoughts on:\n What do you like about the FortiGate CNF solution. Does anything beneficial stand out in comparison to the competition?\n What room for improvement do you see in the solution. Is there anything we are missing that the competition has or companies are asking for but no solution exists on the market?\n For any issues or enhancements, please capture screenshots and provide as much detail as possible. What specific problem or use case does the enhancement solve?\n What are your thoughts on using FortiManager to manage policy and objects vs having all items in the FortiGate CNF portal? Any pros/cons for leaning heavy towards one side or is parity expected by customers?\n  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]